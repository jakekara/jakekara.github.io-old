<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jakekara.github.io</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://example.com/</link>
    <atom:link href="http://example.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 07 Oct 2017 17:02:26 -0400</pubDate>
    <lastBuildDate>Sat, 07 Oct 2017 17:02:26 -0400</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>Split big topojson files into a grid of files</title>
        <description>&lt;p&gt;I made a script to split a giant topojson file into a ton of smaller ones.&lt;/p&gt;

&lt;p&gt;Here’s the code: &lt;a href=&quot;https://github.com/jakekara/toposplit&quot;&gt;https://github.com/jakekara/toposplit&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;why&quot;&gt;Why?&lt;/h4&gt;

&lt;p&gt;I needed to make a block-level map of the entire state of
Connecticut. Here’s &lt;a href=&quot;https://jakekara.github.io/block-zoom-ct/&quot;&gt;a demo of the final
product&lt;/a&gt;. Click a town to zoom
in. It loads only the topojson file for the grid it needs, on the fly,
rather than loading the entire state’s worth of blocks at once.&lt;/p&gt;

&lt;h4 id=&quot;mapshaper-comes-close-but&quot;&gt;mapshaper comes close but…&lt;/h4&gt;

&lt;p&gt;Census blocks are tiny – there are 65,000+ in Connecticut, and Connecticut
is a tiny state. That means a topojson file, even simplified, of all the
Census blocks in the state is 30+ MB. Waaay too big.&lt;/p&gt;

&lt;p&gt;So I decided to split the state into a grid, make little topojson files for
each grid, and load them on the fly.&lt;/p&gt;

&lt;p&gt;Mapshaper has the ability to split a topojson file into layers based on a
grid, but I needed to split those layers out into separate files so I wrote
toposplit.&lt;/p&gt;

&lt;p&gt;There’s some documentation in the repo, but I suggest running the demo
script and seeing how that works to see how I actually used
it. Instructions for running the demo are in the EXAMPLE section of the
README.&lt;/p&gt;

&lt;p&gt;The demo downloads a giant shapefile, splits it up into little ones…&lt;/p&gt;

</description>
        <pubDate>Sun, 16 Apr 2017 11:00:30 -0400</pubDate>
        <link>http://example.com/javascript/2017/04/16/toposplit.html</link>
        <guid isPermaLink="true">http://example.com/javascript/2017/04/16/toposplit.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>datab.js, tabular data with js</title>
        <description>&lt;p&gt;I wrote a js library for transforming tabular data in javascript, and
generating editable HTML tables.&lt;/p&gt;

&lt;p&gt;(install with npm install datab)&lt;/p&gt;

&lt;p&gt;Some cool features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can bind a file input element to create a datab.data object and call
a callback function when a user chooses a .csv&lt;/li&gt;
  &lt;li&gt;You can generate a save-able CSV file blob for the user to download at
any point&lt;/li&gt;
  &lt;li&gt;In addition to generating CSV files, you can also generate editable HTML tables, JSON
 objects and JS objects that represent your datab.data object&lt;/li&gt;
  &lt;li&gt;When you generate an HTML table, and you make some alterations using
datab’s built-in edit modes (transpose/add/drop cols), the internal data of
the object can also be synched to incorporate those changes.&lt;/li&gt;
  &lt;li&gt;You can create a datab.js from JSON, a JS object, a CSV file or a CSV
string You can transpose a table and add and drop columns&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Features I want to add:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DOC-U-MEN-TATION, with lots of cool demos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s the repo:
&lt;a href=&quot;https://github.com/jakekara/datab.js&quot;&gt;https://github.com/jakekara/datab.js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here’s a modest demo
&lt;a href=&quot;https://jakekara.github.io/datab.js/demo/&quot;&gt;https://jakekara.github.io/datab.js/demo/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s specifically not styled at all to show you that datab.js doesn’t
care. I don’t want it to be opinionated at all or rely on CSS, or conflict
with your CSS.&lt;/p&gt;

&lt;h4 id=&quot;a-more-interesting-demo-building-a-map&quot;&gt;A more interesting demo: Building a map&lt;/h4&gt;

&lt;p&gt;Here’s a demo of a map-making tool, using datab.js:
&lt;a href=&quot;https://jakekara.github.io/ct-color-map/&quot;&gt;https://jakekara.github.io/ct-color-map/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is the kind of thing I do all the time working in a newsroom. You
supply it a CSV with a column for town names a column of colors (RGB/A HEX
or named web colors) and it will color the map. Here’s &lt;a href=&quot;https://github.com/jakekara/ct-color-map/blob/master/sample_data.csv&quot;&gt;a sample
CSV&lt;/a&gt;
you can “upload” to it (it doesn’t ever leave your local machine.&lt;/p&gt;

&lt;h4 id=&quot;how-im-using-it&quot;&gt;How I’m using it&lt;/h4&gt;

&lt;p&gt;I’m working on a project that deals with a lot of tabular data – ingesting
it into a database and displaying it in a web app. datab has been my swiss
army knife for this project.&lt;/p&gt;

&lt;h4 id=&quot;how-i-plan-to-use-it-or-how-you-might-want-to-use-it&quot;&gt;How I plan to use it, or how you might want to use it&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;I’d love to write a node CLI tool for manipulating tabular data, or
generating web graphics from spreadsheets&lt;/li&gt;
  &lt;li&gt;I have a table-maker demo, complete with a download button that generates
a fully self-contained, single-file HTML chart that you can iframe or
pym.js-embed into your pages. Hoping to upload that soon.&lt;/li&gt;
  &lt;li&gt;Anywhere I need tables from data, I’m going to start using this.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;design-approach&quot;&gt;Design approach&lt;/h4&gt;

&lt;p&gt;I write code using Javascripts prototype OOP model, so that’s how this code
is structured. I don’t use a common approach of packing the entire library
into a single variable.&lt;/p&gt;

&lt;p&gt;I write JS, front-end or back-end, in node modules with require for
dependencies, rathern than using script tags. For front-end stuff, I use
browserify and uglifyjs to bundle everything together and then just include
that one script.&lt;/p&gt;

&lt;p&gt;There are two modules so far – datab.data and datab.ui.&lt;/p&gt;

&lt;p&gt;The .data module is the core functionality of constructing and manipulating
the tabular data object, and exporting it in different formats. This part
is suitable for use in node or in a browser.&lt;/p&gt;

&lt;p&gt;The .ui module is meant to encapsulate the stuff that has to do with
drawing the tabular data set to HTML (and reading data from HTML
tables). This is only useful in a browser.&lt;/p&gt;

&lt;p&gt;I did not reinvent stuff that D3 can handle, like transposing
matrices. However, I haven’t looked at how Bostock implements that and I
might re-implement it myself at some pointi. Since I already store the
matrix internally in two formats – as an array of rows and as an array of
columns, I can transpose a table in constant time (but double the memory
usage)  by just swapping the internal __cols and __rows attributes.&lt;/p&gt;

</description>
        <pubDate>Sun, 16 Apr 2017 11:00:30 -0400</pubDate>
        <link>http://example.com/javascript/2017/04/16/datab.js.html</link>
        <guid isPermaLink="true">http://example.com/javascript/2017/04/16/datab.js.html</guid>
        
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>Command-line CSV processing with Kilgore Trout</title>
        <description>&lt;p&gt;Some csv cleanup scripts grew into a little utility named kilgore.&lt;/p&gt;

&lt;p&gt;It’s basically a wrapper for some pandas functions. I probably should have just
done this with Jupyter notebook, but I’ve been doing so much shell scripting for
the Unix class I’m taking this semester, it just seemed quicker and more
universal. Or maybe it was just more fun.&lt;/p&gt;

&lt;p&gt;Here’s the repo:
&lt;a href=&quot;https://github.com/jakekara/kilgoretrout&quot;&gt;https://github.com/jakekara/kilgoretrout&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;cleanup-module-registry&quot;&gt;Cleanup module registry&lt;/h4&gt;

&lt;p&gt;kilgore lets you drop columns or select specific ones, prettify column headers
(all lowercase, alpha-numeric and underscores), and limit the output to a number
of rows. I also added a registry module where you can write scripts specific to
your cleanup tasks, register them, and then call them with the “–load”
argument.&lt;/p&gt;

&lt;h4 id=&quot;other-features&quot;&gt;Other features&lt;/h4&gt;

&lt;p&gt;kilgore can also output JSON with the –json – an array of rows, each represented by a
dictionary of column name and cell value pairs.&lt;/p&gt;

&lt;p&gt;Finally, kilgore can be forced to load the data as strings, overriding pandas’
column type inference.&lt;/p&gt;

&lt;h4 id=&quot;example-scripts&quot;&gt;Example scripts&lt;/h4&gt;

&lt;p&gt;The demo folder in the repo contains raw data, clean data, and scripts to get
from raw to clean.&lt;/p&gt;

&lt;p&gt;Here’s a slightly modified snippet from absenteeism.sh, for cleaning up CT
schools asentee rate data.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kilgore --skiprows 4 -i &lt;span class=&quot;nv&quot;&gt;$FILENAME&lt;/span&gt; --pretty&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
           --load clean_code_columns &amp;gt; clean/csv/&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;nv&quot;&gt;$FILENAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;.csv
	   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Sat, 11 Mar 2017 10:00:30 -0500</pubDate>
        <link>http://example.com/python/2017/03/11/kilgore.html</link>
        <guid isPermaLink="true">http://example.com/python/2017/03/11/kilgore.html</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>scrapetools.py - for pulling down all linked files from a page</title>
        <description>&lt;p&gt;I wrote some Python functions to help download every file linked to on a web page.&lt;/p&gt;

&lt;p&gt;Here’s &lt;a href=&quot;https://github.com/jakekara/scrapetools.py&quot;&gt;the repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s called scrape_tools.py, and it has a modest four methods:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;makedir(directory) - create a directory if it doesn’t exist. usefule for setting up
your output directory structure programmatically.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;get(url) - wraps requests.get() call and raises an exception when response
status != 200. Otherwise returns content.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;download_bin(url,output_file) - downloads a file, again using requests,
and saves it to output_file (which is path string, not file handle).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;def get_files(html, base_url=lambda x: x, match_term=”.csv”, fname=lambda
x: x) - get all files linked to in html, containing the term match_term,
which defaults to “.csv”. base_url is a method that takes a url and
generates a base url, and fname is function takes a url and generates a
local filename to save the file as on the local machine. Both of these
methods have default values that do nothing.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example-seecpy&quot;&gt;example: seec.py&lt;/h4&gt;

&lt;p&gt;The example
&lt;a href=&quot;https://github.com/jakekara/scrapetools.py/blob/master/seec.py&quot;&gt;seec.py&lt;/a&gt;
demonstrates how to use the file download all of the CSV files linked to on
the &lt;a href=&quot;http://seec.ct.gov/eCrisHome/eCRIS_Search/PreviousYears&quot;&gt;Connecticut State Elections Enforcement Commission’s disbursement and
receipt data
page&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 27 Jan 2017 04:22:30 -0500</pubDate>
        <link>http://example.com/python/2017/01/27/scrapetools.html</link>
        <guid isPermaLink="true">http://example.com/python/2017/01/27/scrapetools.html</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>API keychain to bypass rate limits</title>
        <description>&lt;p&gt;I wrote an API keychain to use multiple keys on the same API, getting around daily max-call rate limits.&lt;/p&gt;

&lt;p&gt;Here’s &lt;a href=&quot;https://github.com/jakekara/api-hammer&quot;&gt;the repo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I called it API hammer. It’s a proof-of-concept keychain module for
handling multiple keys on the same API, potentially bypassing rate
limits. Keeps track of requests per day, and when the limit is exhausted,
uses another api key.&lt;/p&gt;

&lt;h4 id=&quot;usage&quot;&gt;usage&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;c&quot;&gt;# import the module&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;apihammer&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create a 'connection'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# service corresponds to keys.json file &quot;service&quot; field&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apihammer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;noaa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# get a valid api key (non-exhausted)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api_key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# make your API call...&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;your_api_call_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;keysjson&quot;&gt;keys.json&lt;/h4&gt;

&lt;p&gt;By default, apihammer uses a file called keys.json for an api keychain
file. Each time you call the api_key() method, apihammer updates the
keychain file. When the calls_per_day is reached for an api key, it is now
considered exhausted for that day.&lt;/p&gt;

&lt;p&gt;You will want to copy keys.json.example to keys.json like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cp keys.json.example keys.json&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and modify the settings appropriately.&lt;/p&gt;

&lt;p&gt;The structure of keys.json is an array of objects. You must specify a
“service” property, a “key” (the api key itself) property. uname is not yet
used, but it is intendend to help you keep track of which email address
your key is associated with. “calls_per_day” must be set to the max calls
the API allows per day.&lt;/p&gt;

&lt;p&gt;apihammer will add fields “calls” and “last_call” for its bookkeeping
purposes.&lt;/p&gt;

&lt;h4 id=&quot;calls-per-second&quot;&gt;calls per second&lt;/h4&gt;

&lt;p&gt;apihammer can throttle the api_key() function if one calls:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_calls_per_second&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All this will do is force the api_key() method to sleep for 1/5 of a second
before returning. Since your API request method should be dependent upon
the return value of api_key(), this will cause your code to obey the API’s
calls-per-second rate limiting.&lt;/p&gt;

&lt;h4 id=&quot;refactor-remnants-proof-of-concept-code&quot;&gt;Refactor remnants, proof of concept code&lt;/h4&gt;

&lt;p&gt;There is some left-over code in apihammer from when I initially thought I
might also use the module to make the api calls, but I realized that’s not
the best design. There are some methods that aren’t used. I wanted to get
the code out fast. Along those lines, I haven’t exhaustively tested this.&lt;/p&gt;

&lt;p&gt;Since this code hasn’t been tested much, please consider it a proof of
concept.&lt;/p&gt;

&lt;h4 id=&quot;be-nice&quot;&gt;Be nice&lt;/h4&gt;

&lt;p&gt;If some data provider is good enough to provide an API you should generally
respect the nature of their rate limiting and not try to get around it. But
sometimes you have to be a jerk.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Jan 2017 04:14:30 -0500</pubDate>
        <link>http://example.com/python/2017/01/24/api-hammer.html</link>
        <guid isPermaLink="true">http://example.com/python/2017/01/24/api-hammer.html</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Fetching FAA airport status in python</title>
        <description>&lt;p&gt;I wrote some code to fetch airport status from the FAA’s airport status
API.&lt;/p&gt;

&lt;p&gt;Here’s &lt;a href=&quot;https://github.com/jakekara/faa-airport-status.py&quot;&gt;the repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;http://services.faa.gov/docs/services/airport/#airportStatus&quot;&gt;API&lt;/a&gt; itself is pretty minimal.&lt;/p&gt;

&lt;p&gt;You can get XML or JSON, but I’m just interested in JSON.&lt;/p&gt;

&lt;p&gt;There are two “library” files, airportstatus.py and airports.py, that can
be used in your code, and two examples of command line scripts that use the
libraries, getall.py and getstatus.py.&lt;/p&gt;

&lt;h4 id=&quot;airportstatuspy&quot;&gt;airportstatus.py&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jakekara/faa-airport-status.py/blob/master/airportstatus.py&quot;&gt;This
file&lt;/a&gt;
is the main point of interest. It performs API calls with the get_status()
method. It’s so short, I’ll paste the entire code here:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;status_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://services.faa.gov/airport/status/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;?format=application/json&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Error fetching status for airport &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;&quot;: &amp;lt;Status: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;airportspy&quot;&gt;airports.py&lt;/h4&gt;

&lt;p&gt;This file creates a list of (airport code, airport name) tuples, and search()
function that returns the subset of airports whose names or codes include
the search term.&lt;/p&gt;

&lt;p&gt;These are the two command line tool examples:&lt;/p&gt;

&lt;h4 id=&quot;getallpy&quot;&gt;getall.py&lt;/h4&gt;

&lt;p&gt;Get status of all airports in the airports.py list and save them to
all.json. Here’s the Usage:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;  &lt;span class=&quot;nx&quot;&gt;getall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;py&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;getstatuspy&quot;&gt;getstatus.py&lt;/h4&gt;

&lt;p&gt;Get the the status of one airport and print to stdout. Here’s Usage:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;getstatus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;py&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BDL&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;minDelay&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&quot;maxDelay&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&quot;trend&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&quot;reason&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;No known delays for this airport.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&quot;closureEnd&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&quot;avgDelay&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&quot;closureBegin&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&quot;endTime&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
      &lt;span class=&quot;s2&quot;&gt;&quot;ICAO&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;KBDL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Bradley International&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;s2&quot;&gt;&quot;city&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Windsor Locks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;s2&quot;&gt;&quot;IATA&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;BDL&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;s2&quot;&gt;&quot;delay&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;s2&quot;&gt;&quot;state&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Connecticut&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;s2&quot;&gt;&quot;weather&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;wind&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Northwest at 3.5mph&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&quot;weather&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Mostly Cloudy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&quot;meta&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;http://weather.gov/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
          &lt;span class=&quot;s2&quot;&gt;&quot;credit&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;NOAA's National Weather Service&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
          &lt;span class=&quot;s2&quot;&gt;&quot;updated&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;4:51 PM Local&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&quot;temp&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;40.0 F (4.4 C)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;s2&quot;&gt;&quot;visibility&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.0&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Thu, 22 Dec 2016 18:50:30 -0500</pubDate>
        <link>http://example.com/python/2016/12/22/airportstatus.html</link>
        <guid isPermaLink="true">http://example.com/python/2016/12/22/airportstatus.html</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Apple screenshot PNGs contain non-standard chunk</title>
        <description>&lt;p&gt;I did some idle poking around in the PNG file format, and found something weird.&lt;/p&gt;

&lt;p&gt;Here’s &lt;a href=&quot;https://gist.github.com/jakekara/8e667b7d31350692f7439cb5d0324d05&quot;&gt;the gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I read up just enough on the .PNG standard to get a sense of how the data
is structured. The first few bytes in the file are the same on every PNG,
followed by a series of “chunks” that are structured the same way.&lt;/p&gt;

&lt;p&gt;Each chunk has a chunk type, which is one of set of predefined chunks, such
as IHDR for the image header, and IDAT for the image data. I wrote a simple
loop to run through each chunk and print out the chunk type and its length
in bytes.&lt;/p&gt;

&lt;p&gt;Oddly enough, the .PNG I was using to test out my code had a chunk type
that wasn’t documented: iDOT. Here’s the out (note that because there are
so many IDAT chunks in a given file, I just print the number and combined
size at the end, or else the terminal output would just be way too long.):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;     Valid PNG signature
     &lt;span class=&quot;o&quot;&gt;====================&lt;/span&gt;
     chunk_length: 13
     chunk_type:  IHDR
     width:  2818
     height:  2328
     bit_depth:  8
     colour_type:  6c
     compression_method:  0
     filter_method:  0
     interlace_method:  0
     &lt;span class=&quot;o&quot;&gt;====================&lt;/span&gt;
     chunk_length: 2728
     chunk_type:  iCCP
     &lt;span class=&quot;o&quot;&gt;====================&lt;/span&gt;
     chunk_length: 9
     chunk_type:  pHYs
     &lt;span class=&quot;o&quot;&gt;====================&lt;/span&gt;
     chunk_length: 415
     chunk_type:  iTXt
     &lt;span class=&quot;o&quot;&gt;====================&lt;/span&gt;
     chunk_length: 28
     chunk_type:  iDOT
     &lt;span class=&quot;o&quot;&gt;====================&lt;/span&gt;
     chunk_length: 0
     chunk_type:  IEND
     &lt;span class=&quot;o&quot;&gt;====================&lt;/span&gt;
     Found a total of 642 IDAT chunks consuming 10512756 bytes.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        <pubDate>Sun, 11 Dec 2016 18:50:30 -0500</pubDate>
        <link>http://example.com/python/2016/12/11/png-explorations.html</link>
        <guid isPermaLink="true">http://example.com/python/2016/12/11/png-explorations.html</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>Deploying Django news apps on AWS</title>
        <description>&lt;p&gt;$ docker run -p 8080:80 jkara/occupation:latest&lt;/p&gt;

&lt;p&gt;Run that command and you’ll be hosting your own local version of &lt;a href=&quot;http://occupation.trendct.org/&quot;&gt;This
Django app I built&lt;/a&gt; to compare wages for
the same occupation across different states. (While it’s running visit
localhost:8080 from a browser).&lt;/p&gt;

&lt;p&gt;I’ve deployed Django apps on AWS three different ways now, and I wanted to
put down some of my thoughts on each approach. I know, this is poorly organized.&lt;/p&gt;

&lt;h3 id=&quot;approach-1-a-raw-ec2-container&quot;&gt;Approach 1. A “raw” EC2 container&lt;/h3&gt;

&lt;p&gt;The first time I used AWS, I just wanted to spin up a VPS, and EC2 was the
most like other VPS hosting I’d used in the past. It’s just a virtual
server, I SSHed into, configured to match my dev environment, and then
deployed my app. Meh.&lt;/p&gt;

&lt;h3 id=&quot;approach-2-a-docker-container-on-beanstalk&quot;&gt;Approach 2. A Docker container on Beanstalk&lt;/h3&gt;

&lt;p&gt;Building my app locally in Docker allowed me to push it to a Docker repo
and then upload a Dockerrun.aws.json file to Beanstalk to deploy my
app. This is already better than solution 1, since it doesn’t require the
fiddling around with making the virtual server match my dev environment.&lt;/p&gt;

&lt;p&gt;That’s how I built this occupational wage comparison app.&lt;/p&gt;

&lt;p&gt;One distinct bonus of using Docker is that I can just share the image with
colleagues and let them run it locally, without deploying it.&lt;/p&gt;

&lt;p&gt;Another nicety of using Docker is that development process feels especially
clean, since it’s isolated from your dev host.&lt;/p&gt;

&lt;p&gt;In my case, I built a base container that included Apache and with mod_wsgi
and a specific directory where the app would live. When I ran the docker
image, I used the -v flag to mount the local volume where I was developing
my app. This way I didn’t have to build the image every time I changed the
app. I use the base image for every Docker/Django app I write, and I use a
Makefile to simplify that process.&lt;/p&gt;

&lt;p&gt;AWS does offer some pre-baked base Docker images, but by the time I figured
that out I had already built my own. My base image works pretty much
exactly the same way, but I’m sure Amazon’s is better.&lt;/p&gt;

&lt;h3 id=&quot;approach-3-lambda&quot;&gt;Approach 3. Lambda&lt;/h3&gt;

&lt;p&gt;One word: &lt;a href=&quot;https://github.com/Miserlou/Zappa&quot;&gt;Zappa&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Zappa is a deploy tool for Python apps on Lambda. It gives you a bunch of
features Lambda should probably just give you out of the box.&lt;/p&gt;

&lt;p&gt;To build and deploy an app, you just write your Django app and use zappa to do
all the packaging and deploying to Lambda. The tutorial on the link above
is good.&lt;/p&gt;

&lt;h3 id=&quot;the-winner-lambdazappa&quot;&gt;The winner: Lambda/Zappa&lt;/h3&gt;

&lt;p&gt;Overall, I prefer the Lambda approach, and I think it makes the most sense
for medium-sized news organizations that push a lot of apps. Here’s why:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Zappa works great, right out of the box.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lambda represents a significant cost savings. It
doesn’t use any compute time when there is no traffic to the site, unlike
an EC2 instance which has some baseline cost. This is important for a small
news non-profit like the one where I work. I write a lot of apps, and I
want to be able to deploy them all independently and leave them
running. With Lambda, I don’t have to worry about the cumulative costs as
much.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;It feels like the least bloated, most logical way to to do this
thing. After all, my end goal is just to get a Django app living on the web
somewhere. I don’t really want to configure a server, even if it is inside
a Docker container and I only have to do it once. With Lambda, all you are
uploading is your Python code.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;design-considerations-externalizing-state-and-serving-static-files&quot;&gt;Design considerations: Externalizing state and serving static files&lt;/h3&gt;

&lt;p&gt;News apps are different from most types of web apps. Many of them them
don’t have to manage users, and they may not have any state that needs to
persist beyond the baked-in data that you’re presenting. I news see apps in
the following categories:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Client-only, frozen-state - These are apps that can be written
completely in client-side code, JavaScript and HTML. They may have data but
it’s a small enough amount of data that you can just send all of it
(usually as a JSON object) to the client. Hosting these just means serving
up the files somewhere, that’s it. Yay.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Client-server, frozen state - These are like Client-only apps but
there’s too much data to send in a browser request. In many cases, the user
will never need all of the data. The occupation app at the top of this
story is one of these kinds of apps. It has a big database that needs to be
queried either on page load, through AJAX or both. But the database doesn’t
ever need to change once the app is deployed. There are no users to manage,
no blog posts or anything.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Persistent state - These are like 2, but they have users. An example
might a project that has a blog compontent, where your colleagues need to
store data in a database. That database need to persist no matter whether
your app instance is killed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In case of type 2 “frozen-state” apps, Docker might be better than
Lambda for one reason: You can store your database as sqlite3 right in your
Docker container and deploy it. That’s what I did with the occupation
app. Of course this doesn’t work for type 3 “Persistent-state” apps,
because the database would be immutable, and any blog posts your colleagues
write would vanish whenever the container was killed. They wouldn’t like
that.&lt;/p&gt;

&lt;p&gt;In all of these cases, it’s possible to just externalize data to an RDS
database or some other managed database service. That’s what I’m doing in a
project I’ll be deploying in November.&lt;/p&gt;

&lt;p&gt;Just like a database that never needs to be changed, static files can also
be baked into a Docker container. But with Lambda that isn’t really
possible, as far as I know. Static files need to be externalized, and I
like S3 for that. &lt;a href=&quot;https://www.caktusgroup.com/blog/2014/11/10/Using-Amazon-S3-to-store-your-Django-sites-static-and-media-files/&quot;&gt;Here’s a guide
I&lt;/a&gt;
that I follow for that.&lt;/p&gt;
</description>
        <pubDate>Sun, 23 Oct 2016 12:00:00 -0400</pubDate>
        <link>http://example.com/docker/2016/10/23/docker-beanstalk-django.html</link>
        <guid isPermaLink="true">http://example.com/docker/2016/10/23/docker-beanstalk-django.html</guid>
        
        
        <category>docker</category>
        
      </item>
    
      <item>
        <title>OCaml algebraic data types and pattern matching</title>
        <description>&lt;p&gt;I wrote a royal flush simulator in OCaml just to not forget the language.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jakekara/ocaml-cardstuff&quot;&gt;Here it is&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OCaml is cool. I took a class, Abstraction and Design in Computation, that
used OCaml exclusively. It was a good language for that class because we
began with functional programming, including using modules and functors,
and then moved to object oriented programming. It handles both paradigms
well.&lt;/p&gt;

&lt;p&gt;A fellow programmer who doesn’t write functional code asked why I liked
OCaml after taking this class, and I told him about algebraic data
types. The best example I could think of was expressing a deck of cards in
code, which is certainly possible in any programming paradigm and language,
but I think much more pleasant in OCaml.&lt;/p&gt;

&lt;p&gt;Here’s an algebraic data type I defined to represet card faces (in cards.ml):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;face_value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Two&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Three&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Four&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Five&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Six&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Seven&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Eight&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Nine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ten&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Queen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;King&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I did the same thing to define a type for suits…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Type for card suits*)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Diamonds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Clubs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hearts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Spades&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;… and then defined a card as a suit, face tuple:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Type for cards *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;card&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;face_value&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now I could use variables to represent each face value and assign a numeric
value, but that has a few drawbacks.&lt;/p&gt;

&lt;p&gt;First of all, because face_value is a type now, OCaml will handle
enforcement anywhere you specificy you want a face_value. You don’t have to
just use an int and then check every time that it’s within the specified
range.&lt;/p&gt;

&lt;p&gt;Second, it’s easier to read.&lt;/p&gt;

&lt;p&gt;Third, with OCaml’s pattern matching, I now use these types to write
relatively readable, and short, code to test for a royal flush:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ocaml&quot; data-lang=&quot;ocaml&quot;&gt;&lt;span class=&quot;c&quot;&gt;(* Test whether hand is a royal flush *)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;royal_flush&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;card&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nth&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;hands_match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hand&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;King&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Queen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Jack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ten&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This method takes a hand (a list of items of type card) and then tests if
it matches the “pattern” for a royal flush. A royal flush contains an Ace,
King, Queen, Jack and Ten, all of the same suit. I take the “suit” of the
first card, and then test whether the pattern holds. Notice that “suit” is
a variable.&lt;/p&gt;

&lt;p&gt;I believe the above code is much more elegant and readable than could
otherwise be written without pattern matching and algebraic data types.&lt;/p&gt;

&lt;p&gt;I don’t get to use OCaml in my daily work, and I miss it.&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Oct 2016 18:30:00 -0400</pubDate>
        <link>http://example.com/ocaml/cardstuff/2016/10/14/ocaml-algebraic-data-types.html</link>
        <guid isPermaLink="true">http://example.com/ocaml/cardstuff/2016/10/14/ocaml-algebraic-data-types.html</guid>
        
        
        <category>ocaml</category>
        
        <category>cardstuff</category>
        
      </item>
    
      <item>
        <title>Ghostery doesn't like AWS Beanstalk</title>
        <description>&lt;p&gt;Ghostery blocks assets from crazy AWS beanstalk endpoints.&lt;/p&gt;

&lt;p&gt;Other malware/adware/tracker blockers probably do the same.&lt;/p&gt;

&lt;p&gt;I spent half a day pulling my hair out over this, so I’m posting an
admission of my own stupidity as a public service.&lt;/p&gt;

&lt;p&gt;If your css and JS assets aren’t loading when you’re testing a Beanstalk
service, just turn off Ghostery. That’s it.&lt;/p&gt;
</description>
        <pubDate>Wed, 12 Oct 2016 18:30:00 -0400</pubDate>
        <link>http://example.com/aws/2016/10/12/aws-beanstalk-and-ghostery.html</link>
        <guid isPermaLink="true">http://example.com/aws/2016/10/12/aws-beanstalk-and-ghostery.html</guid>
        
        
        <category>AWS</category>
        
      </item>
    
  </channel>
</rss>
